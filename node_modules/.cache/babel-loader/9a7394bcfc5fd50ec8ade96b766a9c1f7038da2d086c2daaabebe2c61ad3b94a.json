{"ast":null,"code":"import _regeneratorRuntime from \"/Users/henoktsegaw/Desktop/Personal Projects/today-i-learned/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/henoktsegaw/Desktop/Personal Projects/today-i-learned/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/henoktsegaw/Desktop/Personal Projects/today-i-learned/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { _generateLinkResponse, _noResolveJsonResponse, _request, _userResponse } from './lib/fetch';\nimport { resolveFetch } from './lib/helpers';\nimport { isAuthError } from './lib/errors';\nvar GoTrueAdminApi = /*#__PURE__*/function () {\n  function GoTrueAdminApi(_ref) {\n    var _ref$url = _ref.url,\n      url = _ref$url === void 0 ? '' : _ref$url,\n      _ref$headers = _ref.headers,\n      headers = _ref$headers === void 0 ? {} : _ref$headers,\n      fetch = _ref.fetch;\n    _classCallCheck(this, GoTrueAdminApi);\n    this.url = url;\n    this.headers = headers;\n    this.fetch = resolveFetch(fetch);\n    this.mfa = {\n      listFactors: this._listFactors.bind(this),\n      deleteFactor: this._deleteFactor.bind(this)\n    };\n  }\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   */\n  _createClass(GoTrueAdminApi, [{\n    key: \"signOut\",\n    value: function signOut(jwt) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _request(this.fetch, 'POST', \"\".concat(this.url, \"/logout\"), {\n                headers: this.headers,\n                jwt: jwt,\n                noResolveJson: true\n              });\n            case 3:\n              return _context.abrupt(\"return\", {\n                data: null,\n                error: null\n              });\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              if (!isAuthError(_context.t0)) {\n                _context.next = 10;\n                break;\n              }\n              return _context.abrupt(\"return\", {\n                data: null,\n                error: _context.t0\n              });\n            case 10:\n              throw _context.t0;\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 6]]);\n      }));\n    }\n    /**\n     * Sends an invite link to an email address.\n     * @param email The email address of the user.\n     * @param options.redirectTo A URL or mobile deeplink to send the user to after they are confirmed.\n     * @param options.data Optional user metadata\n     */\n  }, {\n    key: \"inviteUserByEmail\",\n    value: function inviteUserByEmail(email) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _request(this.fetch, 'POST', \"\".concat(this.url, \"/invite\"), {\n                body: {\n                  email: email,\n                  data: options.data\n                },\n                headers: this.headers,\n                redirectTo: options.redirectTo,\n                xform: _userResponse\n              });\n            case 3:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](0);\n              if (!isAuthError(_context2.t0)) {\n                _context2.next = 10;\n                break;\n              }\n              return _context2.abrupt(\"return\", {\n                data: {\n                  user: null\n                },\n                error: _context2.t0\n              });\n            case 10:\n              throw _context2.t0;\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[0, 6]]);\n      }));\n    }\n    /**\n     * Generates email links and OTPs to be sent via a custom email provider.\n     * @param email The user's email.\n     * @param options.password User password. For signup only.\n     * @param options.data Optional user metadata. For signup only.\n     * @param options.redirectTo The redirect url which should be appended to the generated link\n     */\n  }, {\n    key: \"generateLink\",\n    value: function generateLink(params) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var options, rest, body;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              options = params.options, rest = __rest(params, [\"options\"]);\n              body = Object.assign(Object.assign({}, rest), options);\n              if ('newEmail' in rest) {\n                // replace newEmail with new_email in request body\n                body.new_email = rest === null || rest === void 0 ? void 0 : rest.newEmail;\n                delete body['newEmail'];\n              }\n              _context3.next = 6;\n              return _request(this.fetch, 'POST', \"\".concat(this.url, \"/admin/generate_link\"), {\n                body: body,\n                headers: this.headers,\n                xform: _generateLinkResponse,\n                redirectTo: options === null || options === void 0 ? void 0 : options.redirectTo\n              });\n            case 6:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](0);\n              if (!isAuthError(_context3.t0)) {\n                _context3.next = 13;\n                break;\n              }\n              return _context3.abrupt(\"return\", {\n                data: {\n                  properties: null,\n                  user: null\n                },\n                error: _context3.t0\n              });\n            case 13:\n              throw _context3.t0;\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[0, 9]]);\n      }));\n    }\n    // User Admin API\n    /**\n     * Creates a new user.\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n  }, {\n    key: \"createUser\",\n    value: function createUser(attributes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return _request(this.fetch, 'POST', \"\".concat(this.url, \"/admin/users\"), {\n                body: attributes,\n                headers: this.headers,\n                xform: _userResponse\n              });\n            case 3:\n              return _context4.abrupt(\"return\", _context4.sent);\n            case 6:\n              _context4.prev = 6;\n              _context4.t0 = _context4[\"catch\"](0);\n              if (!isAuthError(_context4.t0)) {\n                _context4.next = 10;\n                break;\n              }\n              return _context4.abrupt(\"return\", {\n                data: {\n                  user: null\n                },\n                error: _context4.t0\n              });\n            case 10:\n              throw _context4.t0;\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[0, 6]]);\n      }));\n    }\n    /**\n     * Get a list of users.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.\n     */\n  }, {\n    key: \"listUsers\",\n    value: function listUsers(params) {\n      var _a, _b, _c, _d, _e, _f, _g;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var pagination, response, users, total, links;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              pagination = {\n                nextPage: null,\n                lastPage: 0,\n                total: 0\n              };\n              _context5.next = 4;\n              return _request(this.fetch, 'GET', \"\".concat(this.url, \"/admin/users\"), {\n                headers: this.headers,\n                noResolveJson: true,\n                query: {\n                  page: (_b = (_a = params === null || params === void 0 ? void 0 : params.page) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '',\n                  per_page: (_d = (_c = params === null || params === void 0 ? void 0 : params.perPage) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ''\n                },\n                xform: _noResolveJsonResponse\n              });\n            case 4:\n              response = _context5.sent;\n              if (!response.error) {\n                _context5.next = 7;\n                break;\n              }\n              throw response.error;\n            case 7:\n              _context5.next = 9;\n              return response.json();\n            case 9:\n              users = _context5.sent;\n              total = (_e = response.headers.get('x-total-count')) !== null && _e !== void 0 ? _e : 0;\n              links = (_g = (_f = response.headers.get('link')) === null || _f === void 0 ? void 0 : _f.split(',')) !== null && _g !== void 0 ? _g : [];\n              if (links.length > 0) {\n                links.forEach(function (link) {\n                  var page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1));\n                  var rel = JSON.parse(link.split(';')[1].split('=')[1]);\n                  pagination[\"\".concat(rel, \"Page\")] = page;\n                });\n                pagination.total = parseInt(total);\n              }\n              return _context5.abrupt(\"return\", {\n                data: Object.assign(Object.assign({}, users), pagination),\n                error: null\n              });\n            case 16:\n              _context5.prev = 16;\n              _context5.t0 = _context5[\"catch\"](0);\n              if (!isAuthError(_context5.t0)) {\n                _context5.next = 20;\n                break;\n              }\n              return _context5.abrupt(\"return\", {\n                data: {\n                  users: []\n                },\n                error: _context5.t0\n              });\n            case 20:\n              throw _context5.t0;\n            case 21:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[0, 16]]);\n      }));\n    }\n    /**\n     * Get user by id.\n     *\n     * @param uid The user's unique identifier\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n  }, {\n    key: \"getUserById\",\n    value: function getUserById(uid) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              _context6.next = 3;\n              return _request(this.fetch, 'GET', \"\".concat(this.url, \"/admin/users/\").concat(uid), {\n                headers: this.headers,\n                xform: _userResponse\n              });\n            case 3:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 6:\n              _context6.prev = 6;\n              _context6.t0 = _context6[\"catch\"](0);\n              if (!isAuthError(_context6.t0)) {\n                _context6.next = 10;\n                break;\n              }\n              return _context6.abrupt(\"return\", {\n                data: {\n                  user: null\n                },\n                error: _context6.t0\n              });\n            case 10:\n              throw _context6.t0;\n            case 11:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[0, 6]]);\n      }));\n    }\n    /**\n     * Updates the user data.\n     *\n     * @param attributes The data you want to update.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n  }, {\n    key: \"updateUserById\",\n    value: function updateUserById(uid, attributes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return _request(this.fetch, 'PUT', \"\".concat(this.url, \"/admin/users/\").concat(uid), {\n                body: attributes,\n                headers: this.headers,\n                xform: _userResponse\n              });\n            case 3:\n              return _context7.abrupt(\"return\", _context7.sent);\n            case 6:\n              _context7.prev = 6;\n              _context7.t0 = _context7[\"catch\"](0);\n              if (!isAuthError(_context7.t0)) {\n                _context7.next = 10;\n                break;\n              }\n              return _context7.abrupt(\"return\", {\n                data: {\n                  user: null\n                },\n                error: _context7.t0\n              });\n            case 10:\n              throw _context7.t0;\n            case 11:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[0, 6]]);\n      }));\n    }\n    /**\n     * Delete a user. Requires a `service_role` key.\n     *\n     * @param id The user id you want to remove.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n  }, {\n    key: \"deleteUser\",\n    value: function deleteUser(id) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.prev = 0;\n              _context8.next = 3;\n              return _request(this.fetch, 'DELETE', \"\".concat(this.url, \"/admin/users/\").concat(id), {\n                headers: this.headers,\n                xform: _userResponse\n              });\n            case 3:\n              return _context8.abrupt(\"return\", _context8.sent);\n            case 6:\n              _context8.prev = 6;\n              _context8.t0 = _context8[\"catch\"](0);\n              if (!isAuthError(_context8.t0)) {\n                _context8.next = 10;\n                break;\n              }\n              return _context8.abrupt(\"return\", {\n                data: {\n                  user: null\n                },\n                error: _context8.t0\n              });\n            case 10:\n              throw _context8.t0;\n            case 11:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this, [[0, 6]]);\n      }));\n    }\n  }, {\n    key: \"_listFactors\",\n    value: function _listFactors(params) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var _yield$_request, data, error;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.prev = 0;\n              _context9.next = 3;\n              return _request(this.fetch, 'GET', \"\".concat(this.url, \"/admin/users/\").concat(params.userId, \"/factors\"), {\n                headers: this.headers,\n                xform: function xform(factors) {\n                  return {\n                    data: {\n                      factors: factors\n                    },\n                    error: null\n                  };\n                }\n              });\n            case 3:\n              _yield$_request = _context9.sent;\n              data = _yield$_request.data;\n              error = _yield$_request.error;\n              return _context9.abrupt(\"return\", {\n                data: data,\n                error: error\n              });\n            case 9:\n              _context9.prev = 9;\n              _context9.t0 = _context9[\"catch\"](0);\n              if (!isAuthError(_context9.t0)) {\n                _context9.next = 13;\n                break;\n              }\n              return _context9.abrupt(\"return\", {\n                data: null,\n                error: _context9.t0\n              });\n            case 13:\n              throw _context9.t0;\n            case 14:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[0, 9]]);\n      }));\n    }\n  }, {\n    key: \"_deleteFactor\",\n    value: function _deleteFactor(params) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.prev = 0;\n              _context10.next = 3;\n              return _request(this.fetch, 'DELETE', \"\".concat(this.url, \"/admin/users/\").concat(params.userId, \"/factors/\").concat(params.id), {\n                headers: this.headers\n              });\n            case 3:\n              data = _context10.sent;\n              return _context10.abrupt(\"return\", {\n                data: data,\n                error: null\n              });\n            case 7:\n              _context10.prev = 7;\n              _context10.t0 = _context10[\"catch\"](0);\n              if (!isAuthError(_context10.t0)) {\n                _context10.next = 11;\n                break;\n              }\n              return _context10.abrupt(\"return\", {\n                data: null,\n                error: _context10.t0\n              });\n            case 11:\n              throw _context10.t0;\n            case 12:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this, [[0, 7]]);\n      }));\n    }\n  }]);\n  return GoTrueAdminApi;\n}();\nexport { GoTrueAdminApi as default };","map":{"version":3,"mappings":"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","names":["_generateLinkResponse","_noResolveJsonResponse","_request","_userResponse","resolveFetch","isAuthError","GoTrueAdminApi","url","headers","fetch","mfa","listFactors","_listFactors","bind","deleteFactor","_deleteFactor","jwt","noResolveJson","data","error","email","options","body","redirectTo","xform","user","params","rest","new_email","newEmail","properties","attributes","pagination","nextPage","lastPage","total","query","page","toString","per_page","perPage","response","json","users","get","links","split","length","forEach","link","parseInt","substring","rel","JSON","parse","uid","id","userId","factors"],"sources":["/Users/henoktsegaw/Desktop/Personal Projects/today-i-learned/node_modules/@supabase/gotrue-js/src/GoTrueAdminApi.ts"],"sourcesContent":["import {\n  Fetch,\n  _generateLinkResponse,\n  _noResolveJsonResponse,\n  _request,\n  _userResponse,\n} from './lib/fetch'\nimport { resolveFetch } from './lib/helpers'\nimport {\n  AdminUserAttributes,\n  GenerateLinkParams,\n  GenerateLinkResponse,\n  Pagination,\n  User,\n  UserResponse,\n  GoTrueAdminMFAApi,\n  AuthMFAAdminDeleteFactorParams,\n  AuthMFAAdminDeleteFactorResponse,\n  AuthMFAAdminListFactorsParams,\n  AuthMFAAdminListFactorsResponse,\n  PageParams,\n} from './lib/types'\nimport { AuthError, isAuthError } from './lib/errors'\n\nexport default class GoTrueAdminApi {\n  /** Contains all MFA administration methods. */\n  mfa: GoTrueAdminMFAApi\n\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected fetch: Fetch\n\n  constructor({\n    url = '',\n    headers = {},\n    fetch,\n  }: {\n    url: string\n    headers?: {\n      [key: string]: string\n    }\n    fetch?: Fetch\n  }) {\n    this.url = url\n    this.headers = headers\n    this.fetch = resolveFetch(fetch)\n    this.mfa = {\n      listFactors: this._listFactors.bind(this),\n      deleteFactor: this._deleteFactor.bind(this),\n    }\n  }\n\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   */\n  async signOut(jwt: string): Promise<{ data: null; error: AuthError | null }> {\n    try {\n      await _request(this.fetch, 'POST', `${this.url}/logout`, {\n        headers: this.headers,\n        jwt,\n        noResolveJson: true,\n      })\n      return { data: null, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Sends an invite link to an email address.\n   * @param email The email address of the user.\n   * @param options.redirectTo A URL or mobile deeplink to send the user to after they are confirmed.\n   * @param options.data Optional user metadata\n   */\n  async inviteUserByEmail(\n    email: string,\n    options: {\n      redirectTo?: string\n      data?: object\n    } = {}\n  ): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/invite`, {\n        body: { email, data: options.data },\n        headers: this.headers,\n        redirectTo: options.redirectTo,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Generates email links and OTPs to be sent via a custom email provider.\n   * @param email The user's email.\n   * @param options.password User password. For signup only.\n   * @param options.data Optional user metadata. For signup only.\n   * @param options.redirectTo The redirect url which should be appended to the generated link\n   */\n  async generateLink(params: GenerateLinkParams): Promise<GenerateLinkResponse> {\n    try {\n      const { options, ...rest } = params\n      const body: any = { ...rest, ...options }\n      if ('newEmail' in rest) {\n        // replace newEmail with new_email in request body\n        body.new_email = rest?.newEmail\n        delete body['newEmail']\n      }\n      return await _request(this.fetch, 'POST', `${this.url}/admin/generate_link`, {\n        body: body,\n        headers: this.headers,\n        xform: _generateLinkResponse,\n        redirectTo: options?.redirectTo,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            properties: null,\n            user: null,\n          },\n          error,\n        }\n      }\n      throw error\n    }\n  }\n\n  // User Admin API\n  /**\n   * Creates a new user.\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async createUser(attributes: AdminUserAttributes): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/admin/users`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Get a list of users.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.\n   */\n  async listUsers(\n    params?: PageParams\n  ): Promise<\n    | { data: { users: User[]; aud: string } & Pagination; error: null }\n    | { data: { users: [] }; error: AuthError }\n  > {\n    try {\n      const pagination: Pagination = { nextPage: null, lastPage: 0, total: 0 }\n      const response = await _request(this.fetch, 'GET', `${this.url}/admin/users`, {\n        headers: this.headers,\n        noResolveJson: true,\n        query: {\n          page: params?.page?.toString() ?? '',\n          per_page: params?.perPage?.toString() ?? '',\n        },\n        xform: _noResolveJsonResponse,\n      })\n      if (response.error) throw response.error\n\n      const users = await response.json()\n      const total = response.headers.get('x-total-count') ?? 0\n      const links = response.headers.get('link')?.split(',') ?? []\n      if (links.length > 0) {\n        links.forEach((link: string) => {\n          const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1))\n          const rel = JSON.parse(link.split(';')[1].split('=')[1])\n          pagination[`${rel}Page`] = page\n        })\n\n        pagination.total = parseInt(total)\n      }\n      return { data: { ...users, ...pagination }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { users: [] }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Get user by id.\n   *\n   * @param uid The user's unique identifier\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async getUserById(uid: string): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'GET', `${this.url}/admin/users/${uid}`, {\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates the user data.\n   *\n   * @param attributes The data you want to update.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async updateUserById(uid: string, attributes: AdminUserAttributes): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'PUT', `${this.url}/admin/users/${uid}`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Delete a user. Requires a `service_role` key.\n   *\n   * @param id The user id you want to remove.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async deleteUser(id: string): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'DELETE', `${this.url}/admin/users/${id}`, {\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  private async _listFactors(\n    params: AuthMFAAdminListFactorsParams\n  ): Promise<AuthMFAAdminListFactorsResponse> {\n    try {\n      const { data, error } = await _request(\n        this.fetch,\n        'GET',\n        `${this.url}/admin/users/${params.userId}/factors`,\n        {\n          headers: this.headers,\n          xform: (factors: any) => {\n            return { data: { factors }, error: null }\n          },\n        }\n      )\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  private async _deleteFactor(\n    params: AuthMFAAdminDeleteFactorParams\n  ): Promise<AuthMFAAdminDeleteFactorResponse> {\n    try {\n      const data = await _request(\n        this.fetch,\n        'DELETE',\n        `${this.url}/admin/users/${params.userId}/factors/${params.id}`,\n        {\n          headers: this.headers,\n        }\n      )\n\n      return { data, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}